[{"code":"}\n/*\nCode Edited by Hichem Soft\nyoutube channel : Hichem Soft\n*/\n@Override\n    protected void onActivityResult(int _requestCode, int _resultCode, Intent _data) {\n  super.onActivityResult(_requestCode, _resultCode, _data);\n            \nif (_requestCode \u003d\u003d new_folder){\n    if (_resultCode \u003d\u003d Activity.RESULT_OK) {\n            if (_data !\u003d null) {\n              final Uri uri2 \u003d _data.getData();\nif (Uri.decode(uri2.toString()).endsWith(\":\")) {\nSketchwareUtil.showMessage(getApplicationContext(), \"‚õî\");\naskPermission(uri2.toString());\n}\nelse {\nfinal int takeFlags \u003d i.getFlags()\n            \u0026 (Intent.FLAG_GRANT_READ_URI_PERMISSION\n            | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n// Check for the freshest data.\ngetContentResolver().takePersistableUriPermission(uri2, takeFlags);\n\n\n%2$s\n\n\n}\n\n       } else {\n        \n   }\n       } else {\n      \n%3$s\n \n   }\n}\n\n\nif (_requestCode \u003d\u003d 2000) {\n\t      if (android.os.Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.R) {\n\t\t        if (Environment.isExternalStorageManager()) {\n\t\t\t          \n\t\t\t        } else {\n\t\t\t\n\t\t\t        }\n\t\t      }\n\t    \n}\n\n\n\n       \n\n}\n\n// solve android 11 sdcard permissions\n\n\n public void RequestPermission_Dialog() {\n    if (android.os.Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.R) {\n\t      try {\n\t\t        Intent intent \u003d new Intent(android.provider.Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);\n\t\t        intent.addCategory(\"android.intent.category.DEFAULT\");\n\t\t        intent.setData(Uri.parse(String.format(\"package: \", new Object[]{getApplicationContext().getPackageName()})));\n\t\t        startActivityForResult(intent, 2000);\n\t\t      } catch (Exception e) {\n\t\t        Intent obj \u003d new Intent();\n\t\t        obj.setAction(android.provider.Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);\n\t\t        startActivityForResult(obj, 2000);\n\t\t      }\n\t    } else {\n\t      androidx.core.app.ActivityCompat.requestPermissions(%1$s.this, new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE, android.Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_CODE);\n\t    }\n  }\n\n  public boolean permission() {\n    if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.R) { // R is Android 11\n\t      return Environment.isExternalStorageManager();\n\t    } else {\n\t      int write \u003d androidx.core.content.ContextCompat.checkSelfPermission(getApplicationContext(), android.Manifest.permission.WRITE_EXTERNAL_STORAGE);\n\t      int read \u003d androidx.core.content.ContextCompat.checkSelfPermission(getApplicationContext(), android.Manifest.permission.READ_EXTERNAL_STORAGE);\n\t\n\t      return write \u003d\u003d android.content.pm.PackageManager.PERMISSION_GRANTED\n\t          \u0026\u0026 read \u003d\u003d android.content.pm.PackageManager.PERMISSION_GRANTED;\n\t    }\n} \n\n// ask permissions request\n\npublic void askPermission(final String _uri) {\n\t\nif (fromStorage) {\ni \u003d new Intent(Intent.ACTION_OPEN_DOCUMENT);\n}\n\ti.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n\t\t\t\ti.setAction(Intent.ACTION_OPEN_DOCUMENT_TREE);\n\t\t\t\t    i.putExtra(android.provider.DocumentsContract.EXTRA_INITIAL_URI, Uri.parse(_uri));\n\t\t\t\t        startActivityForResult(i, new_folder);\n\t}\n\n// check permissions of path if accepted \n\n\npublic boolean checkPermission(final String _uri) {\n\t\tUri muri \u003d Uri.parse(_uri);\n\t\t    dFile \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), muri);\n\t\t                    \n\t\tif (dFile.canRead() \u0026\u0026 dFile.canWrite()) {\n\t\t\treturn true ;\n\t\t}\n\t\treturn false ;\n\t}\n\n// simple path to UriTree path\n\n\npublic String pathToRealUri( String _path) {\n\t\turiFor1 \u003d \"content://com.android.externalstorage.documents/tree/primary%%3A\";\n\nif ( _path.endsWith(\"/\")) {\n_path \u003d _path.substring(0, _path.length()-1);\n}\n\n\n\t\tif (_path.contains(\"/sdcard/\")) {\n\t\t\turiFor2 \u003d _path.replace(\"/sdcard/\", \"\").replace(\"/\", \"%%2F\");\n\t\t\t\n\t\t\tif (uriFor2.substring(uriFor2.length()-1, uriFor2.length()).equals(\"/\")) {\n\t\t\t\t\n\t\t\t\turiFor2 \u003d uriFor1.substring(0, uriFor1.length()-1);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\tif (_path.contains(\"/storage/\") \u0026\u0026 _path.contains(\"/emulated/\")) {\n\t\t\t\turiFor2 \u003d _path.replace(\"/storage/emulated/0/\", \"\").replace(\"/\", \"%%2F\");\n\t\t\t\t\n\t\t\t\tif (uriFor2.substring(uriFor2.length()-1, uriFor2.length()).equals(\"/\")) {\n\t\t\t\t\t\n\t\t\t\t\turiFor2 \u003d uriFor1.substring(0, uriFor1.length()-1);\n\t\t\t\t\t\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn uriFor1 \u003d uriFor1 + uriFor2;\n\t}\n\n\n// simple path to UriTree path 2\n\npublic String pathToUri( String _path) {\n\t\turiFor1 \u003d \"content://com.android.externalstorage.documents/tree/primary%%3AAndroid/document/primary%%3A\";\n\nif ( _path.endsWith(\"/\")) {\n_path \u003d _path.substring(0, _path.length()-1);\n}\n\n\t\tif (_path.contains(\"/sdcard/\")) {\n\t\t\turiFor2 \u003d _path.replace(\"/sdcard/\", \"\").replace(\"/\", \"%%2F\");\n\t\t\t\n\t\t\tif (uriFor2.substring(uriFor2.length()-1, uriFor2.length()).equals(\"/\")) {\n\t\t\t\t\n\t\t\t\turiFor2 \u003d uriFor1.substring(0, uriFor1.length()-1);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\tif (_path.contains(\"/storage/\") \u0026\u0026 _path.contains(\"/emulated/\")) {\n\t\t\t\turiFor2 \u003d _path.replace(\"/storage/emulated/0/\", \"\").replace(\"/\", \"%%2F\");\n\t\t\t\t\n\t\t\t\tif (uriFor2.substring(uriFor2.length()-1, uriFor2.length()).equals(\"/\")) {\n\t\t\t\t\t\n\t\t\t\t\turiFor2 \u003d uriFor1.substring(0, uriFor1.length()-1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn uriFor1 \u003d uriFor1 + uriFor2;\n\t}\n\n// ccopy file from path to path\n\nprivate boolean copyAsset(final String assetFilename, final Uri targetUri) {\n  \t\t\ttry{\n  \t\t\t\tint count;\n  \t\t\t\tInputStream input \u003d null;\n\t\tOutputStream output \u003d null;\n  \t\t\t\t\n  \t\t\t\tContentResolver content \u003d getApplicationContext().getContentResolver();\n\t\t\t  \n            input \u003d getApplicationContext().getAssets().open(assetFilename);\n\t\t\t\n            output \u003d content.openOutputStream(targetUri);\n            \n            \n  \t\t\t\tbyte data[] \u003d new byte[1024];\n  \t\t\t\twhile ((count \u003d input.read(data))\u003e0) {\n  \t\t\t\t\toutput.write(data, 0, count);\n  \t\t\t\t}\n  \t\t\t\toutput.flush();\n  \t\t\t\toutput.close();\n  \t\t\t\tinput.close();\n  \t\t\t\t\n  \t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), \"success ‚úîÔ∏è ŸÜÿ¨ÿßÿ≠ \");\n\t\t\t\t \n  \t\t\t}catch(Exception e){\n  \t\t\t\t\n  \t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), e.toString());\n\t\t\t\t  return false;\n  \t\t\t}\n\nreturn true;\n}\n\n\npublic boolean copyFiles(Context context, Uri fileUri, Uri targetUri)\n    {\n        \t\tInputStream is \u003d null;\n\t\tOutputStream os \u003d null;\n\n\ntry {\n\t\ttry {\n\t\t\t\nContentResolver content \u003d context.getContentResolver();\n            is \u003d content.openInputStream(fileUri);\n            os \u003d content.openOutputStream(targetUri);\n\t\t\t           \n        byte[] buffer \u003d new byte[1024];\n        int length;\n        while ((length \u003d is.read(buffer)) \u003e 0) {\n            os.write(buffer, 0, length);\n        }\n\t\t\t\n    } finally {\n        is.close();\n        os.close();\n    } \n} catch (IOException e) {\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\nreturn true;\n}\n\n\nprivate boolean fromStorage \u003d false;\n  final static int REQUEST_CODE \u003d 333;\n  final static  int OLD_REQUEST \u003d 2000;\n  private SharedPreferences sha;\nprivate Intent i \u003d new Intent();\n\tprivate  Uri muri;\n\tprivate String uriFor1 \u003d \"\";\n\tprivate String uriFor2 \u003d \"\";\n\tprivate  \n\tandroidx.documentfile.provider.DocumentFile dFile;\n\tprivate double PermissionNumber;\n\tprivate  static final int new_folder \u003d 43;\n{","color":"#FFFF1744","name":"first block fix storage in android 11","typeName":"","palette":"71","type":"e","spec":"(put i  more block) %m.activity  if User accepted the Path then ŸÇÿ®ŸàŸÑ","spec2":"if User Denied/Canceled the path chooser Then ÿ±ŸÅÿ∂"},{"code":"checkPermission(pathToRealUri(%s))","color":"#FFF44336","name":"if my apo have permission to path","typeName":"","palette":"71","type":"b","spec":"if my app have permission to path %s "},{"code":"askPermission(pathToUri(%s));","color":"#FFF44336","name":"ask perission to path","typeName":"","palette":"71","type":" ","spec":"ask permission to Path %s "},{"code":"if (android.os.Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.R) {\n    try {\n        \n       if (permission()) {\t   \n%1$s          \n\t\t                } else {\n\t\t                  RequestPermission_Dialog();\n\n\t\t                }\n        \n        \n    } catch (Exception e) {\n               \n    }\n\t\t                \n\t         } else {\n\n%1$s\n\n}","color":"#FFF44336","name":"permission for sdcard if not working","typeName":"","palette":"71","type":"c","spec":"permission for /sdcard/ if not working  try {"},{"code":"","color":"#FF9C27B0","name":"additional blocks","typeName":"","palette":"71","type":"h","spec":"additional blocks üëá ÿ®ŸÑŸàŸÉÿßÿ™ ÿßÿ∂ÿßŸÅŸäÿ©"},{"code":" pathToUri(%s)","color":"#FF9C27B0","name":"simple path to UriTree path","typeName":"","palette":"71","type":"s","spec":"simple path %s  to UriTree path "},{"code":"","color":"#FF9C27B0","name":"info2 info","typeName":"","palette":"71","type":"h","spec":"the bellow block give you uri tree path to check it if have permission only"},{"code":"pathToRealUri(%s)","color":"#FF9C27B0","name":"simple path to uritree path s","typeName":"","palette":"71","type":"s","spec":"simple Path %s to UriTree path"},{"code":" if (android.os.Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.R) {\n\t      \n%s\n\t\t        \n\t    } else {\n\t      \n\t    %s  \n\t    }","color":"#FF9C27B0","name":"if android version is 11 or more","typeName":"","palette":"71","type":"e","spec":"if Version Android \u003e or \u003d Android 11 then","spec2":"and if android version less then 11 then"},{"code":"","color":"#FF9C27B0","name":"copy File","typeName":"","palette":"71","type":"h","spec":"copy file"},{"code":"\nString myPath \u003d pathToRealUri(%1$s);\n\nString myPathOut \u003d pathToRealUri(%3$s);\n\nfinal String fileName \u003d %2$s;\n\nif (!myPath.endsWith(\"%%2F\")) {\n\nmyPath \u003d myPath + \"%%2F\";\n\n}\n\n Uri mUri \u003d Uri.parse(myPath + fileName);\n \n Uri uriOut \u003d Uri.parse(myPathOut);\n \n \n \n  androidx.documentfile.provider.DocumentFile  dFile \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), mUri);\n                    \n\n androidx.documentfile.provider.DocumentFile    dFile2 \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), uriOut);\n                    \n\n    dFile2 \u003d dFile2.createFile(mUri.toString(), fileName);\n\t\n    uriOut \u003d dFile2.getUri();\n\n\n\nif (copyFromUri(getApplicationContext(), mUri, uriOut)) {\n\t    try {\n\t\tSketchwareUtil.showMessage(getApplicationContext(), \"Done ŸÜÿ¨ÿßÿ≠\");\n\t\t\n\t} catch (Exception e) {\n\t\t \n\t}\n\t    } else {\n\t    try {\n\t\tSketchwareUtil.showMessage(getApplicationContext(), \"failed ŸÅÿ¥ŸÑ\");\n\t\n\t} catch (Exception e) {\n\t\t \n\t}\n}","color":"#FF9C27B0","name":"copy file from to 11","typeName":"","palette":"71","type":" ","spec":"Copy file Path %s  Name %s  to Path %s "},{"code":"","color":"#FF9C27B0","name":"copy files from assets","typeName":"","palette":"71","type":"h","spec":"Copy from assets"},{"code":"fromStorage \u003d false;\ntry {\nUri mUri \u003d Uri.parse(pathToRealUri(%2$s));\n\nString fileName \u003d %1$s;\n\nandroidx.documentfile.provider.DocumentFile dFile \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), mUri);\n           Uri mUri2 \u003d Uri.parse(mUri.toString()+ \"%%2\" + fileName);\n          androidx.documentfile.provider.DocumentFile  dFile2 \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), mUri2);\n            \n  try {              \n\nandroidx.documentfile.provider.DocumentFile file \u003d dFile.findFile(%1$s);\n   android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), file.getUri());\n\n                    android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), mUri2);\n\n\n} catch (FileNotFoundException e) {\n                } catch (Exception e2) {\n                }\n\n\ndFile2 \u003d dFile.createFile(\"%3$s/%4$s\", fileName);\n            mUri \u003d dFile2.getUri();\n        \n        \n        \n        if (copyAsset(fileName, mUri)) {\n           \n        } else {\n            \n        }\n\n                \n      } catch (Exception re){}      \n            \n        \n        ","color":"#FF9C27B0","name":"copy asset file to path andoid 11","typeName":"","palette":"71","type":" ","spec":"copy asset File name %s  to Path %s  name File %s.inputOnly / extention %s.inputOnly  "},{"code":"fromStorage \u003d false;\ntry {\nUri mUri \u003d Uri.parse(pathToRealUri(%3$s));\n\nString fileName \u003d %2$s;\n\nandroidx.documentfile.provider.DocumentFile dFile \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), mUri);\n           Uri mUri2 \u003d Uri.parse(mUri.toString()+ \"%%2\" + fileName);\n          androidx.documentfile.provider.DocumentFile  dFile2 \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), mUri2);\n            \n  try {              \n\nandroidx.documentfile.provider.DocumentFile file \u003d dFile.findFile(%2$s);\n   android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), file.getUri());\n\n                    android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), mUri2);\n\n\n} catch (FileNotFoundException e) {\n                } catch (Exception e2) {\n                }\n\n\ndFile2 \u003d dFile.createFile(\"%4$s/%5$s\", fileName);\n            mUri \u003d dFile2.getUri();\n        \n        \n        \n        if (copyAsset(%1$s + fileName, mUri)) {\n           \n        } else {\n            \n        }\n\n                \n      } catch (Exception re){}      \n            \n        \n        ","color":"#FF4A148C","name":"copy file in folder from assets android 11","typeName":"","palette":"71","type":" ","spec":"copy asset Folder Name %s  File name %s  to Path %s  name File %s.inputOnly / extention %s.inputOnly  "},{"code":"","color":"#FF9C27B0","name":"delete file android 11 block","typeName":"","palette":"71","type":"h","spec":"delete file android 11"},{"code":"fromStorage \u003d false;\n             try {\n\t\t                 \nUri uri \u003d Uri.parse(pathToRealUri(%1$s));\n\nandroidx.documentfile.provider.DocumentFile dfile \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), uri);\n\t\t\t\t\t \n\t\tandroidx.documentfile.provider.DocumentFile file \u003d dfile.findFile(%2$s);\n   android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), file.getUri());\n\t\tshowMessage(\"Deleted ‚úîÔ∏è ÿ™ŸÖ ÿßŸÑÿ≠ÿ∞ŸÅ\");\n\t\t                } catch (FileNotFoundException e) {\n\t\t              showMessage(\"not found üö´ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\");\n\t\t                } catch (Exception e2) {\n\t\t                }","color":"#FF9C27B0","name":"delete file android 11 ","typeName":"","palette":"71","type":" ","spec":"Delete File path %s  Name %s "},{"code":"","color":"#FF9C27B0","name":"create folder android 11","typeName":"","palette":"71","type":"h","spec":"create folder android 11"},{"code":"Uri ur \u003d Uri.parse(pathToRealUri(%1$s));\n\nandroidx.documentfile.provider.DocumentFile dir \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), ur);\n\t\t\t\t\nandroidx.documentfile.provider.DocumentFile create \u003d \ndir.createDirectory(%2$s);\n\t\t\t\t\t\t\t \n\t                try {\n\t\t                    android.provider.DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), create.getUri());\n\t\tshowMessage(\"created ‚úîÔ∏è ÿ™ŸÖ \");\n\t\t                } catch (FileNotFoundException e) {\n\t\t              showMessage(e.toString());\n\t\t                } catch (Exception e2) {\nshowMessage(e2.toString());\n\t\t                }","color":"#FF9C27B0","name":"create folder android 11 direcrory","typeName":"","palette":"71","type":" ","spec":"create in Path %s  a Directory name %s "},{"code":"","color":"#FF9C27B0","name":"copy file from path to path","typeName":"","palette":"71","type":"h","spec":"Copy file from path to path"},{"code":"fromStorage \u003d true;\n\nString fileName \u003d %2$s;\r\n\r\nString inputDir \u003d %1$s;\r\n\r\nString outDir \u003d %3$s;\r\n\r\n\r\nUri uriIn \u003d Uri.parse(pathToRealUri(inputDir) + \"%%2F\" + fileName);\r\n\r\nUri uriOut \u003d Uri.parse(pathToRealUri(outDir));\r\n\r\n\r\n\r\n\r\n\r\nandroidx.documentfile.provider.DocumentFile dFileIn \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), uriIn);\r\n                    \r\n\r\n  androidx.documentfile.provider.DocumentFile  dFileOut \u003d androidx.documentfile.provider.DocumentFile.fromTreeUri(getApplicationContext(), uriOut);\r\n \nString mymeName \u003d \"\";\nString mymeType \u003d \"\";\n              \nif (fileName.substring(fileName.length()-3, fileName.length()).startsWith(\".\")) {\n\n mymeName \u003d fileName.substring(0, fileName.length()-2);\n\n mymeType \u003d fileName.substring(fileName.length()-3, fileName.length());\n\nshowMessage(mymeName+ \"/\" + mymeType);\n\n} else {}\n\n\r\n    dFileOut \u003d dFileOut.createFile(mymeName+ \"/\" + mymeType, fileName);\r\n    \r\n    uriOut \u003d dFileOut.getUri();\n\n\ntry {\r\n\r\nif (copyFiles(getApplicationContext(), uriIn, uriOut)) {\r\n    \r\n\t    \r\n\t\tSketchwareUtil.showMessage(getApplicationContext(), \"ŸÜÿ¨ÿßÿ≠\");\r\n\t\t\r\n\t\r\n\t    } else {\r\n\t    \r\n\t\tSketchwareUtil.showMessage(getApplicationContext(), \"ŸÅÿ¥ŸÑ.\");\r\n\t\t\r\n\t\t\t}\n\t\t                \n\t\t              \n\t\t                } catch (Exception e2) {\n\n\t\t                }\r\n","color":"#FF9C27B0","name":"copy file from path to path android Q","typeName":"","palette":"71","type":" ","spec":"Copy file from path %s  file name %s  to Path %s "}]